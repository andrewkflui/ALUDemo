/***************************************************************
 *
 * Arithmetic Logic Unit (ALU) Interactive Demo
 * A teaching and learning tool for computer architecture
 * 
 * Copyright (c) 2007 Dr. Andrew Kwok-Fai LUI
 * The Open University of Hong Kong
 *
 * Enhance the learning effectiveness of students through greater interactions
 */
/*  This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/
package faifai.aludemo;

import faifai.aludemo.widgets.Number;
import helper.gui.TutorialFrame;
import javax.swing.JOptionPane;

public class LMCOperationDemo extends javax.swing.JFrame {

  private int state = 0;
  private int instruction = 0;
  private String instructionStr;
  private int opcode;
  private int operand;
  private Number instructionRegister;
  private Number accumulator;
  private boolean isLMCSuspended = false;
  private String fetchRTL[] = {"PC > MAR", "MEM[MAR] > MDR", "MDR > IR"};
  private String addRTL[] = {"IR[ADDR] > MAR", "MEM[MAR] > MDR", "ACC + MDR > ACC", "PC + 1 > PC"};
  private String subRTL[] = {"IR[ADDR] > MAR", "MEM[MAR] > MDR", "ACC - MDR > ACC", "PC + 1 > PC"};
  private String stoRTL[] = {"IR[ADDR] > MAR", "ACC > MDR", "MDR > MEM[MAR]", "PC + 1 > PC"};
  private String ldaRTL[] = {"IR[ADDR] > MAR", "MEM[MAR] > MDR", "MDR > ACC > ACC", "PC + 1 > PC"};
  private String currentRTL;
  private int countInstruction = 0;
  private int countClockCycle = 0;
  private TutorialFrame tutorialFrame;

  /** Creates new form ALUDemo */
  public LMCOperationDemo() {
    try {
        javax.swing.UIManager.setLookAndFeel("javax.swing.plaf.metal.MetalLookAndFeel");
    } catch (Exception ex) {
    }
    initComponents();
    instructionRegister = demoPanelLMC1.getInstructionRegister();
    accumulator = demoPanelLMC1.getAccumulator();
    demoPanelLMC1.loadMemory("/default_memory/lmc_Add2.mem");
    resetLMC();
    try {
      tutorialFrame = new TutorialFrame();
      tutorialFrame.loadText("/tutorial/LMCOperationDemo.html");
      tutorialFrame.setTutorialTopic("LMC Operation Demo");
      tutorialFrame.setVisible(true);
    } catch (Exception ex) {
      ex.printStackTrace();
    }
  }

  private void closeApplication() {
    int result = JOptionPane.showConfirmDialog(this, "Are you sure to quit?", "Confirm", JOptionPane.OK_CANCEL_OPTION);
    if (result == JOptionPane.CANCEL_OPTION) {
      return; /* The Cancel button is pressed */
    }
    System.exit(0);
  }

  private void resetLMC() {
    isLMCSuspended = false;
    jButton3.setEnabled(false);
    state = 0;
    countClockCycle = 0;
    countInstruction = 0;
    setLMCStatus("Normal");
    demoPanelLMC1.resetPC();
    currentRTL = fetchRTL[0];
    demoPanelLMC1.setDataMovement(currentRTL);
    setCurrentRTL(currentRTL);
    demoPanelLMC1.updateDisplay();
    jTextArea1.setText(fetchRTL[0] + "\n");
  }

  private void setFetchExecutionStatus(String text) {
  }

  private void setCurrentRTL(String text) {
    jLabel3.setText(text);
    jTextArea1.append(text + "\n");
  }

  private void setCurrentInstruction(String text) {
    jLabel2.setText(text);
  }

  private void setLMCStatus(String text) {
    jLabel4.setText(text);
  }

  private void updateStatistics() {
    String message = "<html># Clock Cycles = " + countClockCycle + "<br />";
    message += "# Instructions = " + countInstruction + "<br />";
    if (countInstruction > 0) {
      message += "CC/I = " + (countClockCycle / (float) countInstruction);
    } else {
      message += " ";
    }
    jLabel5.setText(message);
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {
    java.awt.GridBagConstraints gridBagConstraints;

    demoPanelLMC1 = new faifai.aludemo.DemoPanelLMC();
    jPanel1 = new javax.swing.JPanel();
    jLabel2 = new javax.swing.JLabel();
    jLabel3 = new javax.swing.JLabel();
    jLabel4 = new javax.swing.JLabel();
    jButton3 = new javax.swing.JButton();
    jScrollPane1 = new javax.swing.JScrollPane();
    jTextArea1 = new javax.swing.JTextArea();
    jLabel5 = new javax.swing.JLabel();
    jLabel1 = new javax.swing.JLabel();
    jButton2 = new javax.swing.JButton();
    jMenuBar1 = new javax.swing.JMenuBar();
    jMenu1 = new javax.swing.JMenu();
    jMenuItem1 = new javax.swing.JMenuItem();
    jMenu2 = new javax.swing.JMenu();
    jMenuItem2 = new javax.swing.JMenuItem();
    jMenuItem3 = new javax.swing.JMenuItem();

    setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
    setTitle("LMC Data Movement Demo");
    setBackground(new java.awt.Color(255, 255, 102));
    setMinimumSize(new java.awt.Dimension(800, 600));
    addWindowListener(new java.awt.event.WindowAdapter() {
      public void windowClosing(java.awt.event.WindowEvent evt) {
        formWindowClosing(evt);
      }
    });
    getContentPane().setLayout(new java.awt.GridBagLayout());

    demoPanelLMC1.setBackground(new java.awt.Color(255, 255, 153));
    demoPanelLMC1.setMinimumSize(new java.awt.Dimension(540, 420));
    demoPanelLMC1.setPreferredSize(new java.awt.Dimension(540, 420));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    getContentPane().add(demoPanelLMC1, gridBagConstraints);

    jPanel1.setMinimumSize(new java.awt.Dimension(200, 600));
    jPanel1.setPreferredSize(new java.awt.Dimension(200, 600));
    jPanel1.setLayout(new java.awt.GridBagLayout());

    jLabel2.setBackground(new java.awt.Color(255, 255, 255));
    jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18));
    jLabel2.setForeground(new java.awt.Color(153, 51, 0));
    jLabel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Current Instruction"));
    jLabel2.setMaximumSize(new java.awt.Dimension(16, 60));
    jLabel2.setMinimumSize(new java.awt.Dimension(16, 60));
    jLabel2.setOpaque(true);
    jLabel2.setPreferredSize(new java.awt.Dimension(16, 60));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    jPanel1.add(jLabel2, gridBagConstraints);

    jLabel3.setBackground(new java.awt.Color(255, 255, 255));
    jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14));
    jLabel3.setForeground(new java.awt.Color(102, 0, 102));
    jLabel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Current RTL Operation"));
    jLabel3.setMaximumSize(new java.awt.Dimension(16, 60));
    jLabel3.setMinimumSize(new java.awt.Dimension(16, 60));
    jLabel3.setOpaque(true);
    jLabel3.setPreferredSize(new java.awt.Dimension(16, 60));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    jPanel1.add(jLabel3, gridBagConstraints);

    jLabel4.setBackground(new java.awt.Color(255, 255, 255));
    jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14));
    jLabel4.setText("Normal");
    jLabel4.setBorder(javax.swing.BorderFactory.createTitledBorder("LMC Status"));
    jLabel4.setMaximumSize(new java.awt.Dimension(16, 40));
    jLabel4.setMinimumSize(new java.awt.Dimension(16, 40));
    jLabel4.setOpaque(true);
    jLabel4.setPreferredSize(new java.awt.Dimension(16, 40));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    jPanel1.add(jLabel4, gridBagConstraints);

    jButton3.setBackground(new java.awt.Color(255, 204, 204));
    jButton3.setFont(new java.awt.Font("Tahoma", 1, 10));
    jButton3.setText("Restart Computer");
    jButton3.setEnabled(false);
    jButton3.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        restartActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    jPanel1.add(jButton3, gridBagConstraints);

    jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
    jScrollPane1.setMinimumSize(new java.awt.Dimension(23, 200));
    jScrollPane1.setPreferredSize(new java.awt.Dimension(146, 200));

    jTextArea1.setColumns(20);
    jTextArea1.setEditable(false);
    jTextArea1.setFont(new java.awt.Font("Monospaced", 0, 12));
    jTextArea1.setRows(5);
    jTextArea1.setMargin(new java.awt.Insets(5, 5, 5, 5));
    jScrollPane1.setViewportView(jTextArea1);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    jPanel1.add(jScrollPane1, gridBagConstraints);

    jLabel5.setBackground(new java.awt.Color(255, 255, 255));
    jLabel5.setFont(new java.awt.Font("Tahoma", 0, 10));
    jLabel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Statistics"));
    jLabel5.setMaximumSize(new java.awt.Dimension(16, 80));
    jLabel5.setMinimumSize(new java.awt.Dimension(16, 80));
    jLabel5.setOpaque(true);
    jLabel5.setPreferredSize(new java.awt.Dimension(16, 80));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    jPanel1.add(jLabel5, gridBagConstraints);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    jPanel1.add(jLabel1, gridBagConstraints);

    jButton2.setBackground(new java.awt.Color(255, 204, 204));
    jButton2.setFont(new java.awt.Font("Tahoma", 1, 10));
    jButton2.setText("Send Clock Signal");
    jButton2.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        clockSignalActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    jPanel1.add(jButton2, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
    gridBagConstraints.weighty = 1.0;
    getContentPane().add(jPanel1, gridBagConstraints);

    jMenu1.setText("File");

    jMenuItem1.setText("Quit");
    jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jMenuItem1ActionPerformed(evt);
      }
    });
    jMenu1.add(jMenuItem1);

    jMenuBar1.add(jMenu1);

    jMenu2.setText("Help");

    jMenuItem2.setText("About LMCDemo");
    jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jMenuItem2ActionPerformed(evt);
      }
    });
    jMenu2.add(jMenuItem2);

    jMenuItem3.setText("Help");
    jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jMenuItem3ActionPerformed(evt);
      }
    });
    jMenu2.add(jMenuItem3);

    jMenuBar1.add(jMenu2);

    setJMenuBar(jMenuBar1);

    pack();
  }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
      closeApplication();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
      closeApplication();
    }//GEN-LAST:event_formWindowClosing

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
      String message = "<html>LMC RTL Data Movement Demo version 1.0<br>Developed by Dr. Andrew Kwok-Fai Lui<br> </html>";
      JOptionPane.showMessageDialog(this, message);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void clockSignalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clockSignalActionPerformed
      if (isLMCSuspended) {
        return;
      }
      demoPanelLMC1.clockSignalReceived();
      demoPanelLMC1.resetDataMovement();
      countClockCycle++;
      state++;
      if (state < 3) {
        currentRTL = fetchRTL[state];
      } else if (state == 3) {
        instruction = instructionRegister.getRawValue();
        opcode = instruction / 100;
        operand = instruction % 100;
        switch (opcode) {
          case 0:
            instructionStr = "COB";
            setCurrentInstruction(instructionStr);
            break;
          case 1:
            instructionStr = "ADD";
            setCurrentInstruction(instructionStr + " " + operand);
            break;
          case 2:
            instructionStr = "SUB";
            setCurrentInstruction(instructionStr + " " + operand);
            break;
          case 3:
            instructionStr = "STO";
            setCurrentInstruction(instructionStr + " " + operand);
            break;
          case 5:
            instructionStr = "LDA";
            setCurrentInstruction(instructionStr + " " + operand);
            break;
          case 6:
            instructionStr = "BR";
            setCurrentInstruction(instructionStr);
            break;
          case 7:
            instructionStr = "BRZ";
            setCurrentInstruction(instructionStr + " " + operand);
            break;
          case 8:
            instructionStr = "BRP";
            setCurrentInstruction(instructionStr + " " + operand);
            break;
          default:
            if (instruction == 901) {
              instructionStr = "IN";
              setCurrentInstruction(instructionStr);
              break;
            } else if (instruction == 902) {
              instructionStr = "OUT";
              setCurrentInstruction(instructionStr);
              break;
            }
        }
      }
      if (state >= 3) {
        if (instructionStr.equals("COB")) {
          setLMCStatus("LMC Suspended");
          jButton3.setEnabled(true);
          isLMCSuspended = true;
          currentRTL = "";
          state = 0;
        } else if (instructionStr.equals("IN")) {
          System.out.println("State = " + state);
          if (state == 3) {
            currentRTL = "IN > ACC";
            System.out.println("IN " + state);
          } else if (state == 4) {
            currentRTL = "PC + 1 > PC";
          } else {
            currentRTL = "PC > MAR";
            state = 0;
          }
        } else if (instructionStr.equals("OUT")) {
          if (state == 3) {
            currentRTL = "ACC > OUT";
          } else if (state == 4) {
            currentRTL = "PC + 1 > PC";
          } else {
            currentRTL = "PC > MAR";
            state = 0;
          }
        } else if (instructionStr.equals("ADD")) {
          if (state == 7) {
            currentRTL = "PC > MAR";
            state = 0;
          } else {
            currentRTL = addRTL[state - 3];
          }
        } else if (instructionStr.equals("SUB")) {
          if (state == 7) {
            currentRTL = "PC > MAR";
            state = 0;
          } else {
            currentRTL = subRTL[state - 3];
          }
        } else if (instructionStr.equals("STO")) {
          if (state == 7) {
            currentRTL = "PC > MAR";
            state = 0;
          } else {
            currentRTL = stoRTL[state - 3];
          }
        } else if (instructionStr.equals("LDA")) {
          if (state == 7) {
            currentRTL = "PC > MAR";
            state = 0;
          } else {
            currentRTL = ldaRTL[state - 3];
          }
        } else if (instructionStr.equals("BR")) {
          if (state == 4) {
            currentRTL = "PC > MAR";
            state = 0;
          } else {
            currentRTL = "IR[ADDR] > PC";
          }
        } else if (instructionStr.equals("BRZ")) {
          if (state == 4) {
            currentRTL = "PC > MAR";
            state = 0;
          } else {
            if (accumulator.getValue() == 0) {
              currentRTL = "IR[ADDR] > PC";
            } else {
              currentRTL = "PC + 1 > PC";
            }
          }
        } else if (instructionStr.equals("BRP")) {
          if (state == 4) {
            currentRTL = "PC > MAR";
            state = 0;
          } else {
            if (accumulator.getValue() >= 0) {
              currentRTL = "IR[ADDR] > PC";
            } else {
              currentRTL = "PC + 1 > PC";
            }
          }
        }
      }
      if (state == 0) {
        jTextArea1.append("--- Instruction " + instructionStr + " Completed\n");
        countInstruction++;
      }
      demoPanelLMC1.setDataMovement(currentRTL);
      setCurrentRTL(currentRTL);
      demoPanelLMC1.updateDisplay();
      updateStatistics();
    }//GEN-LAST:event_clockSignalActionPerformed

    private void restartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_restartActionPerformed
      resetLMC();
}//GEN-LAST:event_restartActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
      tutorialFrame.showFrame();
    }//GEN-LAST:event_jMenuItem3ActionPerformed

  /**
   * @param args the command line arguments
   */
  public static void main(String args[]) {
    java.awt.EventQueue.invokeLater(new Runnable() {

      public void run() {
        new LMCOperationDemo().setVisible(true);
      }
    });
  }
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private faifai.aludemo.DemoPanelLMC demoPanelLMC1;
  private javax.swing.JButton jButton2;
  private javax.swing.JButton jButton3;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JLabel jLabel2;
  private javax.swing.JLabel jLabel3;
  private javax.swing.JLabel jLabel4;
  private javax.swing.JLabel jLabel5;
  private javax.swing.JMenu jMenu1;
  private javax.swing.JMenu jMenu2;
  private javax.swing.JMenuBar jMenuBar1;
  private javax.swing.JMenuItem jMenuItem1;
  private javax.swing.JMenuItem jMenuItem2;
  private javax.swing.JMenuItem jMenuItem3;
  private javax.swing.JPanel jPanel1;
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JTextArea jTextArea1;
  // End of variables declaration//GEN-END:variables
}
