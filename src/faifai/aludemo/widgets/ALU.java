/***************************************************************
 *
 * Arithmetic Logic Unit (ALU) Interactive Demo
 * A teaching and learning tool for computer architecture
 * 
 * Copyright (c) 2007 Dr. Andrew Kwok-Fai LUI
 * The Open University of Hong Kong
 *
 * Enhance the learning effectiveness of students through greater interactions
 */
/*  This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/
package faifai.aludemo.widgets;

import java.awt.Color;
import javax.swing.JOptionPane;

public class ALU extends javax.swing.JPanel implements Component {

  protected Number operand1 = new Number();
  protected Number operand2 = new Number();
  protected Port inPort1 = new Port(operand1, "ALU IN1", Port.PORT_IN);
  protected Port inPort2 = new Port(operand2, "ALU IN2", Port.PORT_IN);
  protected String errorMessage = null;
  protected Number accumulatorNumber = null;

  public ALU() {
    initComponents();
    inPort1.setStatus(Port.STATUS_READ);
    inPort2.setStatus(Port.STATUS_READ);
  }

  public Port getInPort1() {
    return inPort1;
  }

  public Port getInPort2() {
    return inPort2;
  }

  public void setAccumulatorNumber(Number theNumber) {
    this.accumulatorNumber = theNumber;
  }

  public void setFunction(int functionIndex) {
    if (functionIndex < 0) {
      jList1.clearSelection();
    } else {
      jList1.setSelectedIndex(functionIndex);
    }
    repaint();
  }

  public void setErrorStatus(String message) {
    jButton1.setBackground(Color.PINK);
    jButton1.setText("ERROR");
    this.errorMessage = message;
  }

  public void setNormalStatus() {
    jButton1.setBackground(Color.YELLOW);
    jButton1.setText("");
    this.errorMessage = null;
  }

  public void clockSignalReceived() {
    int selectedFunction = jList1.getSelectedIndex();
    if (selectedFunction == 0) {
      setNormalStatus();
      return;
    }
    setNormalStatus();
    Bus inPortBus1 = BusManager.getBusOfPort(inPort1);
    Bus inPortBus2 = BusManager.getBusOfPort(inPort2);

    try {
      if (selectedFunction == 1 || selectedFunction == 2) {
        if (!inPortBus1.moveData() || !inPortBus2.moveData()) {
          setErrorStatus("[ALU] No input data presented at one of the input ports");
          return;
        }
      } else if (selectedFunction == 3) {
        if (!inPortBus1.moveData()) {
          setErrorStatus("[ALU] No input data presented at one of the input ports");
          return;
        }
      }
    } catch (Exception ex) {
      ex.printStackTrace();
      setErrorStatus(ex.toString());
      return;
    }

    if (selectedFunction == 1) {
      int result = operand2.getValue() + operand1.getValue();
      accumulatorNumber.setValue(result);
    } else if (selectedFunction == 2) {
      int result = operand2.getValue() - operand1.getValue();
      accumulatorNumber.setValue(result);
    } else if (selectedFunction == 3) {
      accumulatorNumber.setValue(operand1.getValue());
    }
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {
    java.awt.GridBagConstraints gridBagConstraints;

    jLabel1 = new javax.swing.JLabel();
    jScrollPane1 = new javax.swing.JScrollPane();
    jList1 = new javax.swing.JList();
    jPanel1 = new javax.swing.JPanel();
    jButton1 = new javax.swing.JButton();

    setBackground(new java.awt.Color(51, 102, 0));
    setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(0, 0, 0), null));
    setMinimumSize(new java.awt.Dimension(110, 100));
    setPreferredSize(new java.awt.Dimension(110, 100));
    setLayout(new java.awt.GridBagLayout());

    jLabel1.setBackground(new java.awt.Color(204, 255, 204));
    jLabel1.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
    jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    jLabel1.setText("ALU");
    jLabel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
    jLabel1.setMaximumSize(new java.awt.Dimension(40, 20));
    jLabel1.setMinimumSize(new java.awt.Dimension(40, 18));
    jLabel1.setOpaque(true);
    jLabel1.setPreferredSize(new java.awt.Dimension(40, 18));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.gridwidth = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    add(jLabel1, gridBagConstraints);

    jScrollPane1.setFont(new java.awt.Font("Tahoma", 0, 9)); // NOI18N
    jScrollPane1.setMinimumSize(new java.awt.Dimension(23, 140));
    jScrollPane1.setPreferredSize(new java.awt.Dimension(56, 140));

    jList1.setFont(new java.awt.Font("Tahoma", 0, 9)); // NOI18N
    jList1.setModel(new javax.swing.AbstractListModel() {
      String[] strings = { "- No Operation -", "ADD", "SUBTRACT", "SET" };
      public int getSize() { return strings.length; }
      public Object getElementAt(int i) { return strings[i]; }
    });
    jList1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
    jList1.setPreferredSize(new java.awt.Dimension(54, 50));
    jList1.setSelectedIndex(0);
    jScrollPane1.setViewportView(jList1);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.gridwidth = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    add(jScrollPane1, gridBagConstraints);

    jPanel1.setMinimumSize(new java.awt.Dimension(10, 20));
    jPanel1.setOpaque(false);
    jPanel1.setLayout(new java.awt.GridBagLayout());

    jButton1.setBackground(new java.awt.Color(255, 255, 153));
    jButton1.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButton1ActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    jPanel1.add(jButton1, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    add(jPanel1, gridBagConstraints);
  }// </editor-fold>//GEN-END:initComponents

  private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
    if (this.errorMessage == null) {
      return;
    }
    JOptionPane.showMessageDialog(this, errorMessage, "ALU Operation Error",
            JOptionPane.ERROR_MESSAGE);
  }//GEN-LAST:event_jButton1ActionPerformed

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton jButton1;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JList jList1;
  private javax.swing.JPanel jPanel1;
  private javax.swing.JScrollPane jScrollPane1;
  // End of variables declaration//GEN-END:variables
}
