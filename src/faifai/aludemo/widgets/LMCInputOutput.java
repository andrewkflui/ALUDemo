/***************************************************************
 *
 * Arithmetic Logic Unit (ALU) Interactive Demo
 * A teaching and learning tool for computer architecture
 * 
 * Copyright (c) 2007 Dr. Andrew Kwok-Fai LUI
 * The Open University of Hong Kong
 *
 * Enhance the learning effectiveness of students through greater interactions
 */
/*  This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/
package faifai.aludemo.widgets;

import java.awt.Color;
import java.util.ArrayList;
import javax.swing.JOptionPane;

public class LMCInputOutput extends javax.swing.JPanel implements Component, PortListener {

  protected Port inputPort;
  protected Port outputPort;
  protected ArrayList<Integer> inputBuffer = new ArrayList<Integer>();
  protected boolean receivedRead = false;
  protected boolean receivedInput = false;
  protected int receivedInputValue = 0;

  public LMCInputOutput() {
    initComponents();
    inputPort = new Port(this, "INPUT", Port.PORT_OUT);
    outputPort = new Port(this, "OUTPUT", Port.PORT_IN);
    updateDisplay();
  }

  public Port getInputPort() {
    return inputPort;
  }

  public Port getOutputPort() {
    return outputPort;
  }

  public int read(Port thePort) {
    if (thePort == inputPort) {
          System.out.println("Read from Input Buffer "  + inputBuffer.size());
      if (inputBuffer.size() > 0) {
        receivedRead = true;
        return inputBuffer.get(0);
      } else {
        if (receivedInput)
          return receivedInputValue;
        while (true) {
          receivedInput = true;
          String input = JOptionPane.showInputDialog("Enter an integer");
          try {
            receivedInputValue = Integer.parseInt(input);
            return receivedInputValue;
          } catch (Exception ex) {
          }
        }
      }
    }
    JOptionPane.showMessageDialog(this, "Invalid Port Read", "Bus Error", JOptionPane.ERROR_MESSAGE);
    return 0;
  }

  public void write(Port thePort, int data) {
    jTextField3.setText("" + data);
  }

  public void clockSignalReceived() {
    if (outputPort.getStatus() == Port.STATUS_READ) {
      Bus inPortBus = BusManager.getBusOfPort(outputPort);
      try {
        inPortBus.moveData();
      } catch (Exception ex) {
      }
    }
    if (inputPort.getStatus() == Port.STATUS_WRITE) {
      Bus outPortBus = BusManager.getBusOfPort(inputPort);
      try {
        outPortBus.moveData();
      } catch (Exception ex) {
      }
    }
    if (receivedRead) {
      receivedRead = false;
      inputBuffer.remove(0);
    }
    receivedInput = false;
    updateDisplay();
  }

  public void updateDisplay() {
    String inputBufferStr = "";
    for (int i = 0; i < inputBuffer.size(); i++) {
      if (i == 0) {
        inputBufferStr = "" + inputBuffer.get(i);
      } else {
        inputBufferStr += " " + inputBuffer.get(i);
      }
    }
    jTextField1.setText(inputBufferStr);

    jButton3.setText(inputPort.getStatusString());
    if (inputPort.getStatus() == Port.STATUS_READ) {
      jButton3.setBackground(new Color(204, 255, 102));
    } else if (inputPort.getStatus() == Port.STATUS_WRITE) {
      jButton3.setBackground(Color.PINK);
    } else {
      jButton3.setBackground(Color.ORANGE);
    }

    jButton4.setText(outputPort.getStatusString());
    if (outputPort.getStatus() == Port.STATUS_READ) {
      jButton4.setBackground(new Color(204, 255, 102));
    } else if (outputPort.getStatus() == Port.STATUS_WRITE) {
      jButton4.setBackground(Color.PINK);
    } else {
      jButton4.setBackground(Color.ORANGE);
    }
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {
    java.awt.GridBagConstraints gridBagConstraints;

    jLabel1 = new javax.swing.JLabel();
    jTextField1 = new javax.swing.JTextField();
    jButton2 = new javax.swing.JButton();
    jTextField2 = new javax.swing.JTextField();
    jButton3 = new javax.swing.JButton();
    jLabel2 = new javax.swing.JLabel();
    jTextField3 = new javax.swing.JTextField();
    jButton4 = new javax.swing.JButton();

    setBackground(new java.awt.Color(153, 51, 0));
    setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(0, 0, 0), null));
    setMinimumSize(new java.awt.Dimension(110, 55));
    setPreferredSize(new java.awt.Dimension(110, 55));
    setLayout(new java.awt.GridBagLayout());

    jLabel1.setBackground(new java.awt.Color(204, 255, 204));
    jLabel1.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
    jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    jLabel1.setText("INPUT");
    jLabel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
    jLabel1.setMaximumSize(new java.awt.Dimension(60, 20));
    jLabel1.setMinimumSize(new java.awt.Dimension(60, 18));
    jLabel1.setOpaque(true);
    jLabel1.setPreferredSize(new java.awt.Dimension(60, 18));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.gridheight = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
    add(jLabel1, gridBagConstraints);

    jTextField1.setBackground(new java.awt.Color(204, 255, 204));
    jTextField1.setEditable(false);
    jTextField1.setFont(new java.awt.Font("Arial", 1, 10)); // NOI18N
    jTextField1.setForeground(new java.awt.Color(51, 102, 0));
    jTextField1.setToolTipText("Input Buffer");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.gridwidth = 3;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
    add(jTextField1, gridBagConstraints);

    jButton2.setBackground(new java.awt.Color(255, 204, 0));
    jButton2.setFont(new java.awt.Font("Tahoma", 0, 9)); // NOI18N
    jButton2.setText("Enter");
    jButton2.setMargin(new java.awt.Insets(2, 2, 2, 2));
    jButton2.setMaximumSize(new java.awt.Dimension(40, 18));
    jButton2.setMinimumSize(new java.awt.Dimension(40, 18));
    jButton2.setPreferredSize(new java.awt.Dimension(40, 18));
    jButton2.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        enterActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 3;
    gridBagConstraints.gridy = 1;
    add(jButton2, gridBagConstraints);

    jTextField2.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
    add(jTextField2, gridBagConstraints);

    jButton3.setBackground(new java.awt.Color(255, 204, 0));
    jButton3.setFont(new java.awt.Font("Tahoma", 0, 9)); // NOI18N
    jButton3.setText("Closed");
    jButton3.setMargin(new java.awt.Insets(2, 2, 2, 2));
    jButton3.setMaximumSize(new java.awt.Dimension(40, 18));
    jButton3.setMinimumSize(new java.awt.Dimension(40, 18));
    jButton3.setPreferredSize(new java.awt.Dimension(40, 18));
    jButton3.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButton3statusActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    add(jButton3, gridBagConstraints);

    jLabel2.setBackground(new java.awt.Color(255, 204, 255));
    jLabel2.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
    jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    jLabel2.setText("OUTPUT");
    jLabel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
    jLabel2.setMaximumSize(new java.awt.Dimension(60, 20));
    jLabel2.setMinimumSize(new java.awt.Dimension(60, 18));
    jLabel2.setOpaque(true);
    jLabel2.setPreferredSize(new java.awt.Dimension(60, 18));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.gridheight = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
    add(jLabel2, gridBagConstraints);

    jTextField3.setBackground(new java.awt.Color(255, 255, 204));
    jTextField3.setEditable(false);
    jTextField3.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.gridwidth = 3;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
    add(jTextField3, gridBagConstraints);

    jButton4.setBackground(new java.awt.Color(255, 204, 0));
    jButton4.setFont(new java.awt.Font("Tahoma", 0, 9)); // NOI18N
    jButton4.setText("Closed");
    jButton4.setMargin(new java.awt.Insets(2, 2, 2, 2));
    jButton4.setMaximumSize(new java.awt.Dimension(40, 18));
    jButton4.setMinimumSize(new java.awt.Dimension(40, 18));
    jButton4.setPreferredSize(new java.awt.Dimension(40, 18));
    jButton4.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButton4statusActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 3;
    gridBagConstraints.gridwidth = 3;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    add(jButton4, gridBagConstraints);
  }// </editor-fold>//GEN-END:initComponents

  private void enterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enterActionPerformed
    try {
      inputBuffer.add(Integer.parseInt(jTextField2.getText()));
      jTextField2.setText("");
    } catch (Exception ex) {
      JOptionPane.showMessageDialog(this, "Invalid Value", "Input Error", JOptionPane.ERROR_MESSAGE);
    }
    updateDisplay();
}//GEN-LAST:event_enterActionPerformed

    private void jButton3statusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3statusActionPerformed
      inputPort.nextStatus();
      updateDisplay();
    }//GEN-LAST:event_jButton3statusActionPerformed

    private void jButton4statusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4statusActionPerformed
      outputPort.nextStatus();
      updateDisplay();
    }//GEN-LAST:event_jButton4statusActionPerformed

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton jButton2;
  private javax.swing.JButton jButton3;
  private javax.swing.JButton jButton4;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JLabel jLabel2;
  private javax.swing.JTextField jTextField1;
  private javax.swing.JTextField jTextField2;
  private javax.swing.JTextField jTextField3;
  // End of variables declaration//GEN-END:variables
}
